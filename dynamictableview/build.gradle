plugins {
    id 'java'
    id "org.openjfx.javafxplugin" version "0.0.10"
    id 'signing'
    id 'maven-publish'
}

group 'io.github.k7t3'
version '0.1.5.3-SNAPSHOT'

repositories {
    mavenCentral()
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    withJavadocJar()
    withSourcesJar()
}

javafx {
    version = '18.0.1'
    modules = [ 'javafx.controls' ]
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
    testImplementation "org.testfx:testfx-junit5:4.0.16-alpha"
    testRuntimeOnly 'org.testfx:openjfx-monocle:jdk-12.0.1+2'
}

test {
    if (!project.hasProperty("headless") || project.headless == "true") {
        // execute TestFX Tests headless -- switch off by using ./gradlew -Pheadless=false
        systemProperty("testfx.robot", "glass")
        systemProperty("testfx.headless", "true")
        systemProperty("prism.order", "sw")
        systemProperty("prism.text", "t2k")
        systemProperty("headless.geometry", "1600x1200-32")
    }

    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'DynamicTableView'
            from components.java
            pom {
                name = 'DynamicTableView'
                description = ''
                url = 'https://github.com/k7t3/DynamicTableView'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'k7t3'
                        name = 'k7t3'
                        email = 'k7t3annnn@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:https://github.com/k7t3/DynamicTableView'
                    developerConnection = 'scm:git:git@github.com:k7t3/DynamicTableView.git'
                    url = 'https://github.com/k7t3/DynamicTableView'
                }

                withXml {
                    var pomNode = asNode()
                    pomNode.dependencies.'*'.findAll() {
                        it.groupId.text() == 'org.openjfx'
                    }.each {
                        it.parent().remove(it)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/releases/'
            def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                def propertyUsername = project.hasProperty('sonatypeUsername') ? project.property('sonatypeUsername') : 'undefined username'
                def propertyPassword = project.hasProperty('sonatypePassword') ? project.property('sonatypePassword') : 'undefined password'

                username = propertyUsername
                password = propertyPassword
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}

compileJava {
    options.encoding = 'UTF-8'
}

javadoc {
    options.encoding = 'UTF-8'
    options.windowTitle("DynamicTableView")
    options.addBooleanOption('html5', true)
    options.addBooleanOption('javafx', true)

    def javaVersion = JavaVersion.current().majorVersion
    options.links("https://openjfx.io/javadoc/"+ javaVersion)
    options.links("https://docs.oracle.com/en/java/javase/" + javaVersion + "/docs/api")
}

//task propertyPrintTest {
//    def username = project.hasProperty('sonatypeUsername') ? project.property('sonatypeUsername') : 'undefined username'
//    def password = project.hasProperty('sonatypePassword') ? project.property('sonatypePassword') : 'undefined password'
//
//    System.out.println('propertyPrintTest')
//    System.out.println(String.format("username = %s, password = %s", username, password))
//}

tasks.withType(Javadoc) {
    doFirst {
        options.modulePath = [] + classpath.files
        options.classpath = []
        System.out.println(classpath.files)
    }
}